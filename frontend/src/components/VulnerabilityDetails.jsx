import React, { useState, useEffect } from 'react';

const VulnerabilityDetails = ({ vulnerabilityId, onClose }) => {
  const [vulnerability, setVulnerability] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  
  const backendUrl = process.env.REACT_APP_BACKEND_URL || `${window.location.protocol}//${window.location.hostname}:5000`;

  useEffect(() => {
    if (vulnerabilityId) {
      fetchVulnerabilityDetails();
    }
  }, [vulnerabilityId]);

  const fetchVulnerabilityDetails = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${backendUrl}/api/vulnerability/${vulnerabilityId}`);
      const data = await response.json();
      setVulnerability(data.vulnerability);
    } catch (error) {
      console.error('Error fetching vulnerability details:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity) => {
    const colors = {
      critical: 'border-l-red-500 bg-red-900/20',
      high: 'border-l-orange-500 bg-orange-900/20',
      medium: 'border-l-yellow-500 bg-yellow-900/20',
      low: 'border-l-blue-500 bg-blue-900/20'
    };
    return colors[severity] || 'border-l-gray-500 bg-gray-900/20';
  };

  const getSeverityBadge = (severity) => {
    const badges = {
      critical: 'bg-red-500 text-white',
      high: 'bg-orange-500 text-white',
      medium: 'bg-yellow-500 text-black',
      low: 'bg-blue-500 text-white'
    };
    return badges[severity] || 'bg-gray-500 text-white';
  };

  const formatDate = (timestamp) => {
    return new Date(timestamp * 1000).toLocaleString();
  };

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div className="bg-gray-800 rounded-lg p-6 max-w-md">
          <div className="text-center text-gray-400">Loading vulnerability details...</div>
        </div>
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div className="bg-gray-800 rounded-lg p-6 max-w-md">
          <div className="text-center text-red-400">Vulnerability not found</div>
          <button
            onClick={onClose}
            className="mt-4 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded"
          >
            Close
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg border border-gray-700 max-w-6xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex justify-between items-center p-6 border-b border-gray-700">
          <div className="flex items-center space-x-4">
            <h2 className="text-2xl font-bold text-white">Vulnerability Details</h2>
            <span className={`px-3 py-1 rounded-full text-sm font-bold ${getSeverityBadge(vulnerability.severity)}`}>
              {vulnerability.severity.toUpperCase()}
            </span>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white text-2xl"
          >
            Ã—
          </button>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-gray-700">
          {['overview', 'details', 'http', 'remediation'].map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-3 text-sm font-medium ${
                activeTab === tab 
                  ? 'text-purple-400 border-b-2 border-purple-400' 
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              {tab.charAt(0).toUpperCase() + tab.slice(1)}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-200px)]">
          {activeTab === 'overview' && (
            <div className="space-y-6">
              {/* Basic Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Vulnerability Information</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Type:</span>
                      <span className="text-white">{vulnerability.type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Severity:</span>
                      <span className={`font-semibold ${
                        vulnerability.severity === 'critical' ? 'text-red-400' :
                        vulnerability.severity === 'high' ? 'text-orange-400' :
                        vulnerability.severity === 'medium' ? 'text-yellow-400' :
                        'text-blue-400'
                      }`}>
                        {vulnerability.severity.toUpperCase()}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Confidence:</span>
                      <span className="text-white">{vulnerability.confidence_score || vulnerability.confidence || 0}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Tool:</span>
                      <span className="text-white">{vulnerability.detection_tool || vulnerability.tool || 'Unknown'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Detected:</span>
                      <span className="text-white">{formatDate(vulnerability.detected_at)}</span>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Target Information</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">URL:</span>
                      <span className="text-white font-mono text-xs break-all">{vulnerability.affected_url || vulnerability.url}</span>
                    </div>
                    {vulnerability.affected_parameter && (
                      <div className="flex justify-between">
                        <span className="text-gray-400">Parameter:</span>
                        <span className="text-white font-mono">{vulnerability.affected_parameter}</span>
                      </div>
                    )}
                    {vulnerability.cwe_id && (
                      <div className="flex justify-between">
                        <span className="text-gray-400">CWE ID:</span>
                        <span className="text-white">{vulnerability.cwe_id}</span>
                      </div>
                    )}
                    {vulnerability.cvss_score && (
                      <div className="flex justify-between">
                        <span className="text-gray-400">CVSS Score:</span>
                        <span className="text-white">{vulnerability.cvss_score}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Description */}
              <div className="bg-gray-900 rounded-lg p-4">
                <h3 className="text-white font-semibold mb-3">Description</h3>
                <p className="text-gray-300 text-sm leading-relaxed">
                  {vulnerability.description || vulnerability.title || 'No description available.'}
                </p>
              </div>

              {/* Title */}
              <div className="bg-gray-900 rounded-lg p-4">
                <h3 className="text-white font-semibold mb-3">Title</h3>
                <p className="text-gray-300 text-sm leading-relaxed">
                  {vulnerability.title || vulnerability.type || 'No title available.'}
                </p>
              </div>
            </div>
          )}

          {activeTab === 'details' && (
            <div className="space-y-6">
              {/* Proof of Concept */}
              {vulnerability.proof_of_concept && (
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Proof of Concept</h3>
                  <pre className="bg-gray-800 p-3 rounded text-sm text-gray-300 overflow-x-auto">
                    {vulnerability.proof_of_concept}
                  </pre>
                </div>
              )}

              {/* Payload */}
              {vulnerability.payload && (
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Payload</h3>
                  <pre className="bg-gray-800 p-3 rounded text-sm text-gray-300 overflow-x-auto">
                    {vulnerability.payload}
                  </pre>
                </div>
              )}

              {/* Raw Data */}
              {vulnerability.raw_data && (
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Raw Data</h3>
                  <pre className="bg-gray-800 p-3 rounded text-sm text-gray-300 overflow-x-auto max-h-60">
                    {typeof vulnerability.raw_data === 'string' 
                      ? vulnerability.raw_data 
                      : JSON.stringify(vulnerability.raw_data, null, 2)
                    }
                  </pre>
                </div>
              )}

              {/* Exploitability */}
              {vulnerability.exploitability && (
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Exploitability</h3>
                  <p className="text-gray-300 text-sm">{vulnerability.exploitability}</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'http' && vulnerability.http_history && (
            <div className="space-y-4">
              <h3 className="text-white font-semibold">HTTP Request/Response History</h3>
              {vulnerability.http_history.length === 0 ? (
                <div className="text-center py-8 text-gray-500">No HTTP history available</div>
              ) : (
                vulnerability.http_history.map((req, index) => (
                  <div key={index} className="bg-gray-900 rounded-lg p-4">
                    <div className="flex justify-between items-center mb-3">
                      <h4 className="text-white font-semibold">
                        {req.method} {req.url}
                      </h4>
                      <div className="text-sm text-gray-400">
                        {req.response_code} Â· {req.response_time_ms}ms
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      <div>
                        <h5 className="text-gray-400 text-sm mb-2">Request</h5>
                        <div className="bg-gray-800 p-3 rounded text-xs">
                          <div className="text-gray-300 mb-2">
                            <strong>Headers:</strong>
                          </div>
                          <pre className="text-gray-400 mb-2">{req.request_headers || 'No headers'}</pre>
                          {req.request_body && (
                            <>
                              <div className="text-gray-300 mb-2">
                                <strong>Body:</strong>
                              </div>
                              <pre className="text-gray-400">{req.request_body}</pre>
                            </>
                          )}
                        </div>
                      </div>
                      
                      <div>
                        <h5 className="text-gray-400 text-sm mb-2">Response</h5>
                        <div className="bg-gray-800 p-3 rounded text-xs">
                          <div className="text-gray-300 mb-2">
                            <strong>Headers:</strong>
                          </div>
                          <pre className="text-gray-400 mb-2">{req.response_headers || 'No headers'}</pre>
                          <div className="text-gray-300 mb-2">
                            <strong>Body:</strong>
                          </div>
                          <pre className="text-gray-400 max-h-40 overflow-y-auto">{req.response_body || 'No body'}</pre>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          )}

          {activeTab === 'remediation' && (
            <div className="space-y-6">
              {/* Remediation Steps */}
              {vulnerability.remediation && (
                <div className="bg-gray-900 rounded-lg p-4">
                  <h3 className="text-white font-semibold mb-3">Remediation Steps</h3>
                  <div className="text-gray-300 text-sm leading-relaxed whitespace-pre-wrap">
                    {vulnerability.remediation}
                  </div>
                </div>
              )}

              {/* General Remediation for Vulnerability Type */}
              <div className="bg-gray-900 rounded-lg p-4">
                <h3 className="text-white font-semibold mb-3">General Remediation Guidelines</h3>
                <div className="text-gray-300 text-sm space-y-3">
                  {vulnerability.type === 'XSS' && (
                    <div>
                      <strong>Cross-Site Scripting (XSS):</strong>
                      <ul className="list-disc list-inside mt-2 space-y-1">
                        <li>Implement proper output encoding/escaping for all user input</li>
                        <li>Use Content Security Policy (CSP) headers</li>
                        <li>Validate and sanitize all user inputs</li>
                        <li>Use parameterized queries to prevent injection</li>
                      </ul>
                    </div>
                  )}
                  
                  {vulnerability.type === 'SQL Injection' && (
                    <div>
                      <strong>SQL Injection:</strong>
                      <ul className="list-disc list-inside mt-2 space-y-1">
                        <li>Use parameterized queries/prepared statements</li>
                        <li>Implement proper input validation</li>
                        <li>Use least privilege database accounts</li>
                        <li>Enable SQL injection protection in WAF</li>
                      </ul>
                    </div>
                  )}
                  
                  {vulnerability.type === 'Directory Traversal' && (
                    <div>
                      <strong>Directory Traversal:</strong>
                      <ul className="list-disc list-inside mt-2 space-y-1">
                        <li>Implement proper file path validation</li>
                        <li>Use whitelisting for allowed file paths</li>
                        <li>Sanitize user input before file operations</li>
                        <li>Run web server with minimal privileges</li>
                      </ul>
                    </div>
                  )}
                  
                  {!['XSS', 'SQL Injection', 'Directory Traversal'].includes(vulnerability.type) && (
                    <div>
                      <strong>General Security Best Practices:</strong>
                      <ul className="list-disc list-inside mt-2 space-y-1">
                        <li>Implement proper input validation and sanitization</li>
                        <li>Use secure coding practices</li>
                        <li>Regular security testing and code reviews</li>
                        <li>Keep all software and dependencies updated</li>
                        <li>Implement proper error handling</li>
                      </ul>
                    </div>
                  )}
                </div>
              </div>

              {/* Verification Steps */}
              <div className="bg-gray-900 rounded-lg p-4">
                <h3 className="text-white font-semibold mb-3">Verification Steps</h3>
                <div className="text-gray-300 text-sm space-y-2">
                  <p>To verify this vulnerability has been fixed:</p>
                  <ol className="list-decimal list-inside space-y-1">
                    <li>Re-run the same test that identified the vulnerability</li>
                    <li>Verify that the vulnerability is no longer exploitable</li>
                    <li>Test with different payloads to ensure comprehensive coverage</li>
                    <li>Perform regression testing on related functionality</li>
                  </ol>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetails;

